{"version":3,"sources":["services/band-service.ts","stores/band-list-store.ts","components/grid.tsx","lib/consts.ts","components/band-card.tsx","pages/main-page.tsx","stores/album-page-store.ts","stores/player-store.ts","components/album-card.tsx","pages/album-page.tsx","stores/band-page-store.ts","pages/band-page.tsx","components/player.tsx","App.tsx","serviceWorker.ts","stores/root-reducer.ts","stores/configure-store.ts","theme/index.ts","index.tsx"],"names":["resolveUrl","url","getAllBands","a","console","log","axios","get","bandLinks","data","getMultipleFromLinkList","getBand","key","bandLink","find","x","id","linkToData","band","Promise","resolve","getBandAlbums","albums","albumList","getAlbum","bandKey","albumKey","album","links","promises","forEach","push","then","result","all","slice","createSlice","name","initialState","allBands","displayBands","reducers","setAllBands","state","action","payload","setDisplayBands","actions","TableGrid","props","TableContainer","Table","size","headers","length","TableHead","TableRow","map","TableCell","title","TableBody","i","rowRenderer","ROUTES","BandCard","Card","style","margin","padding","logo","CardMedia","height","image","CardContent","bandName","MainPageContainer","connect","gridData","bandList","dispatch","store","BandService","React","useEffect","Grid","container","generatePath","item","md","xs","Link","component","RouterLink","to","setAlbum","playlist","isPlaying","currentPlayingIndex","setPlaylist","setIsPlaying","setCurrentPlayingIndex","onInAlbumPlay","songs","toPlay","songIndex","indexOf","AlbumCard","bandId","albumName","albumId","CardHeader","avatar","cover","Avatar","variant","width","src","titleTypographyProps","subheader","year","subheaderTypographyProps","IconButton","onClick","onAlbumPlay","row","moment","utc","lenght","format","onSongPlay","AlbumPageContainer","albumPage","init","albumResult","songToPlay","match","params","setBand","setAlbums","BandPageContainer","bandPage","bandResult","albumsResult","Box","alignContent","Typography","align","Player","getCurrentPlay","player","curPlay","currentPlay","playingIndex","val","PlayerStore","onNext","newIndex","onPrevious","onSongPlaylistPlay","song","index","Paper","position","bottom","left","maxHeight","borderTop","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","autoPlay","playUrl","showSkipControls","onClickNext","onClickPrevious","onEnded","onPlay","e","ExpansionPanelDetails","overflow","selected","Button","App","pb","exact","path","AlbumPage","Boolean","window","location","hostname","BandListStore","reducer","BandPageStore","AlbumPageStore","getRootReducer","history","combineReducers","router","connectRouter","configureAppStore","middleware","getDefaultMiddleware","routerMiddleware","configureStore","theme","createMuiTheme","palette","type","createBrowserHistory","basename","host","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.911c1e7c.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\n\r\nconst resolveUrl = (url: string) => {\r\n    // if dev use next\r\n    if(process.env.NODE_ENV == \"development\"){\r\n        console.log(process.env.NODE_ENV);\r\n        return \"/mkmetalarchive/data/\" + url;\r\n    }else{\r\n        return \"/mkmetalarchive/data/\" + url;\r\n    }\r\n}\r\n\r\nconst getAllBands = async () => {\r\n    console.log(resolveUrl(\"data.json\"));\r\n    var bandLinks = (await axios.get<Models.DataLink[]>(resolveUrl(\"data.json\"))).data;\r\n    return getMultipleFromLinkList<Models.Band>(bandLinks);\r\n}\r\n\r\nconst getBand = async (key: string) => {\r\n    var bandLinks = (await axios.get(resolveUrl(\"data.json\"))).data as Models.DataLink[];\r\n    var bandLink = bandLinks.find(x=>x.id == key)!;\r\n    var band = (await axios.get(resolveUrl(bandLink.linkToData))).data as Models.Band;\r\n    \r\n    return Promise.resolve(band);\r\n}\r\n\r\nconst getBandAlbums = async(key: string) => {\r\n    var bandLinks = (await axios.get<Models.DataLink[]>(resolveUrl(\"data.json\"))).data;\r\n    var bandLink = bandLinks.find(x=>x.id == key)!;\r\n    var band = (await axios.get<Models.Band>(resolveUrl(bandLink.linkToData))).data;\r\n    var albumList = await getMultipleFromLinkList<Models.Album>(band.albums);\r\n    return Promise.resolve(albumList);\r\n}\r\n\r\nconst getAlbum = async(bandKey: string, albumKey: string) =>{\r\n    var albums = await getBandAlbums(bandKey);\r\n    var album = albums.find(x=>x.id == albumKey);\r\n\r\n    return Promise.resolve(album);\r\n}\r\n\r\nconst getMultipleFromLinkList = async<T>(links:Models.DataLink[]) =>{\r\n    var promises: Promise<void>[] = [];\r\n    var data: T[] = [];\r\n\r\n    links.forEach(x => {\r\n        promises.push(axios.get<T>(resolveUrl(x.linkToData)).then((result) => {\r\n            data.push(result.data);\r\n        }));\r\n    });\r\n\r\n    await Promise.all(promises);\r\n    return Promise.resolve(data);\r\n}\r\n\r\n\r\nexport { getAllBands, getBand, getMultipleFromLinkList, getBandAlbums, getAlbum};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\nexport interface BandStore {\r\n    allBands: Models.Band[],\r\n    displayBands: Models.Band[]\r\n}\r\n\r\nexport const initialState: BandStore = {\r\n    allBands: [],\r\n    displayBands: []\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"band-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAllBands: (state: BandStore, action: PayloadAction<Models.Band[]>) => {\r\n            state.allBands = action.payload;\r\n        },\r\n        setDisplayBands: (state: BandStore, action: PayloadAction<Models.Band[]>) => {\r\n            state.displayBands = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setAllBands, setDisplayBands } = slice.actions;\r\n\r\n// thunks\r\n\r\nexport const getAllBands = (): AppThunk => async (dispatch, store) => {\r\n    var result = await BandService.getAllBands();\r\n    dispatch(setDisplayBands(result));\r\n    console.log(result);\r\n}","import React from 'react';\r\nimport { TableContainer, Table, TableHead, TableCell, TableRow, TableBody } from '@material-ui/core';\r\n\r\nexport interface TableProps<T> {\r\n    data: T[];\r\n    headers: TableHeader[];\r\n    rowRenderer: (row: T) => JSX.Element;\r\n}\r\n\r\nexport interface TableHeader {\r\n    title: string;\r\n}\r\n\r\nconst TableGrid = function <T>(props: TableProps<T>) {\r\n    return (<TableContainer>\r\n        <Table size=\"small\">\r\n            {props.headers.length ?\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            props.headers.map(x => <TableCell key={x.title}>{x.title}</TableCell>)\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                : null\r\n            }\r\n            <TableBody>\r\n                {\r\n                    props.data.map((x, i) => props.rowRenderer(x))\r\n                }\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>);\r\n}\r\n\r\nexport { TableGrid };","export const ROUTES = {\r\n    BAND_LIST: \"/\",\r\n    BAND_PAGE: \"/band/:bandName\",\r\n    ALBUM_PAGE: \"/band/:bandName/album/:albumName\"\r\n}","import React from 'react';\r\nimport { Card, CardMedia, CardContent } from '@material-ui/core';\r\n\r\nexport interface BandCardProps {\r\n    bandName: string;\r\n    logo: string;\r\n}\r\n\r\nconst BandCard = (props: BandCardProps) => {\r\n    return (\r\n        <Card style={{ margin: \"10px\", padding: \"10px\" }}>\r\n            {props.logo ?\r\n                <CardMedia style={{ height: \"200px\" }} image={props.logo} />\r\n                : null}\r\n            <CardContent>{props.bandName}</CardContent>\r\n        </Card>)\r\n}\r\n\r\nexport default BandCard;","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getAllBands } from '../stores/band-list-store';\r\nimport { connect } from 'react-redux';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { TableGrid, TableHeader } from '../components/grid';\r\nimport { TableRow, TableCell, Link, Grid } from '@material-ui/core';\r\nimport { generatePath } from 'react-router';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { ROUTES } from '../lib/consts';\r\nimport BandCard from '../components/band-card';\r\n\r\ninterface MainPageProps {\r\n    getAllBands: () => void;\r\n    gridData: Models.Band[];\r\n}\r\n\r\nconst MainPage2 = (props: MainPageProps) => {\r\n    React.useEffect(() => {\r\n        props.getAllBands();\r\n    }, []);\r\n    return <Grid container>\r\n        {\r\n            props.gridData.map(band => {\r\n                const url = generatePath(ROUTES.BAND_PAGE, {\r\n                    bandName: band.id\r\n                });\r\n\r\n                return <Grid key={band.id} item md={3} xs={6}><Link component={RouterLink} to={url}><BandCard bandName={band.name} logo={band.logo} /></Link></Grid>;\r\n            })}\r\n    </Grid>;\r\n}\r\n\r\nconst MainPage = (props: MainPageProps) => {\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"genre\"\r\n        },\r\n        {\r\n            title: \"location\"\r\n        },\r\n        {\r\n            title: \"Status\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Band) => JSX.Element = (row: Models.Band) => {\r\n        const url = generatePath(ROUTES.BAND_PAGE, {\r\n            bandName: row.id\r\n        });\r\n        console.log(url);\r\n\r\n        return (<TableRow key={row.id}>\r\n            <TableCell><Link component={RouterLink} to={url}>{row.name}</Link></TableCell>\r\n            <TableCell>{row.genre}</TableCell>\r\n            <TableCell>{row.location}</TableCell>\r\n            <TableCell>{row.status}</TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        props.getAllBands();\r\n    }, []);\r\n    return <TableGrid<Models.Band> headers={titles} rowRenderer={rowRenderer} data={props.gridData} />;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    getAllBands: () => {\r\n        dispatch(getAllBands());\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        gridData: state.bandList.displayBands\r\n    };\r\n}\r\n\r\nconst MainPageContainer = connect(mapStateToProps, mapDispatchToProps)(MainPage2);\r\n\r\nexport default MainPageContainer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface AlbumPageStore {\r\n    album?: Models.Album;\r\n}\r\n\r\nexport const initialState: AlbumPageStore = {\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"album-page-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAlbum: (state: AlbumPageStore, action: PayloadAction<Models.Album | undefined>) => {\r\n            state.album = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setAlbum } = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const getAlbum = (bandKey: string, albumKey: string): AppThunk => async (dispatch, store) => {\r\n    var albumResult = await BandService.getAlbum(bandKey,albumKey);\r\n    console.log(albumResult);\r\n    dispatch(setAlbum(albumResult));\r\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface PlayerStore {\r\n    playlist: Models.Song[];\r\n    currentPlayingIndex: number;\r\n    isPlaying: boolean;\r\n}\r\n\r\nexport const initialState: PlayerStore = {\r\n    playlist: [],\r\n    isPlaying: false,\r\n    currentPlayingIndex: 0\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"player-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setPlaylist: (state: PlayerStore, action: PayloadAction<Models.Song[]>) => {\r\n            state.playlist = action.payload;\r\n        },\r\n        setIsPlaying: (state: PlayerStore, action: PayloadAction<boolean>)=>{\r\n            state.isPlaying = action.payload;\r\n        },\r\n        setCurrentPlayingIndex: (state: PlayerStore, action: PayloadAction<number>)=>{\r\n            state.currentPlayingIndex = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setPlaylist, setIsPlaying, setCurrentPlayingIndex} = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const addToPlaylist = (entry: Models.Song): AppThunk => async (dispatch, store) => {\r\n    let allEntries = [...store().player.playlist];\r\n    allEntries.push(entry);\r\n    dispatch(setPlaylist(allEntries));\r\n}\r\n\r\nexport const onInAlbumPlay= (songs: Models.Song[], toPlay: Models.Song): AppThunk => async(dispatch, store) =>{\r\n    var songIndex = songs.indexOf(toPlay);\r\n    var playlist = songs.slice(songIndex);\r\n    dispatch(setPlaylist(playlist));\r\n    dispatch(setCurrentPlayingIndex(0));\r\n};\r\n\r\nexport const onPlayNext = (): AppThunk => async(dispatch, store) => {\r\n    var newIndex = store().player.currentPlayingIndex +1;\r\n    if(store().player.playlist.length > newIndex){\r\n        console.log(newIndex);\r\n        dispatch(setCurrentPlayingIndex(newIndex));\r\n    }\r\n}\r\n\r\nexport const onPlayPrevious = (): AppThunk => async(dispatch, store) => {\r\n    var newIndex = store().player.currentPlayingIndex - 1;\r\n    if(newIndex >= 0){\r\n        dispatch(setCurrentPlayingIndex(newIndex));\r\n    }\r\n}\r\n\r\nexport const onSongPlaylistPlay= (song: Models.Song): AppThunk => async(dispatch, store) => {\r\n    var index = store().player.playlist.indexOf(song);\r\n    dispatch(setCurrentPlayingIndex(index));\r\n}","import React from 'react';\r\nimport { Card, CardHeader, Avatar, CardContent, TableRow, TableCell, Button, IconButton } from '@material-ui/core';\r\nimport { TableGrid, TableHeader } from './grid';\r\nimport moment from 'moment';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport { generatePath } from 'react-router';\r\nimport { ROUTES } from '../lib/consts';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport interface AlbumCardProps {\r\n    bandId: string;\r\n    albumId: string;\r\n    name: string;\r\n    year: number;\r\n    cover: string;\r\n    length: number;\r\n    songs: Models.Song[];\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) => void;\r\n    onAlbumPlay: (songs: Models.Song[]) => void;\r\n}\r\n\r\nconst AlbumCard = (props: AlbumCardProps) => {\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"TITLE\"\r\n        },\r\n        {\r\n            title: \"LENGTH\"\r\n        },\r\n        {\r\n            title: \"\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Song) => JSX.Element = (row: Models.Song) => {\r\n        return (<TableRow key={row.id}>\r\n            <TableCell>{row.name}</TableCell>\r\n            <TableCell>{moment.utc(row.lenght * 1000).format('mm:ss')}</TableCell>\r\n            <TableCell><IconButton onClick={() => { props.onSongPlay(props.songs, row) }} ><PlayCircleOutlineIcon /></IconButton></TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n    const url = generatePath(ROUTES.ALBUM_PAGE, {\r\n        bandName: props.bandId,\r\n        albumName: props.albumId\r\n    });\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader\r\n                component={RouterLink}\r\n                to={url}\r\n                avatar={props.cover ? <Avatar variant=\"square\" style={{ height: \"120px\", width: \"120px\" }} src={props.cover} /> : null}\r\n                title={props.name}\r\n                titleTypographyProps={{ variant: \"h4\" }}\r\n                subheader={props.year}\r\n                subheaderTypographyProps={{ variant: \"h5\" }}\r\n                action={\r\n                    <IconButton onClick={() => { props.onAlbumPlay(props.songs) }}>\r\n                        <PlayCircleOutlineIcon />\r\n                    </IconButton>\r\n                }\r\n            />\r\n            <CardContent>\r\n                <TableGrid<Models.Song> headers={titles} rowRenderer={rowRenderer} data={props.songs} />\r\n            </CardContent>\r\n        </Card>);\r\n}\r\n\r\nexport default AlbumCard;","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getAlbum } from '../stores/album-page-store';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connect } from 'react-redux';\r\nimport { onInAlbumPlay } from '../stores/player-store';\r\nimport AlbumCard from '../components/album-card';\r\n\r\nexport interface AlbumPageProps {\r\n    match: {\r\n        params: {\r\n            bandName: string;\r\n            albumName: string;\r\n        }\r\n    }\r\n\r\n    album?: Models.Album;\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) => void;\r\n    init: (bandKey: string, albumKey: string) => void;\r\n    onAlbumPlay: (songs: Models.Song[]) => void;\r\n\r\n}\r\n\r\nconst AlbumPage = (props: AlbumPageProps) => {\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName, props.match.params.albumName);\r\n    }, []);\r\n\r\n    return (\r\n        <>{\r\n            props.album ?\r\n                <>\r\n                    <AlbumCard\r\n                        bandId={props.match.params.bandName}\r\n                        albumId={props.match.params.albumName}\r\n                        name={props.album.name}\r\n                        year={props.album.year}\r\n                        length={props.album.length}\r\n                        cover={props.album.cover}\r\n                        songs={props.album.songs}\r\n                        onAlbumPlay={props.onAlbumPlay}\r\n                        onSongPlay={props.onSongPlay} />\r\n                </> : null\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    init: (bandKey: string, albumKey: string) => {\r\n        dispatch(getAlbum(bandKey, albumKey));\r\n    },\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) => {\r\n        dispatch(onInAlbumPlay(songs, songToPlay));\r\n    },\r\n    onAlbumPlay: (songs: Models.Song[]) => {\r\n        dispatch(onInAlbumPlay(songs, songs[0]));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        album: state.albumPage.album\r\n    };\r\n}\r\n\r\nconst AlbumPageContainer = connect(mapStateToProps, mapDispatchToProps)(AlbumPage);\r\n\r\nexport default AlbumPageContainer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface BandPageStore {\r\n    band?: Models.Band;\r\n    albums: Models.Album[];\r\n}\r\n\r\nexport const initialState: BandPageStore = {\r\n    albums: []\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"band-page-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setBand: (state: BandPageStore, action: PayloadAction<Models.Band | undefined>) => {\r\n            state.band = action.payload;\r\n        },\r\n        setAlbums: (state: BandPageStore, action: PayloadAction<Models.Album[]>)=>{\r\n            state.albums = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setBand, setAlbums } = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const getBand = (id: string): AppThunk => async (dispatch, store) => {\r\n    var bandResult = await BandService.getBand(id);\r\n    var albumsResult = await BandService.getMultipleFromLinkList<Models.Album>(bandResult.albums);\r\n    dispatch(setBand(bandResult));\r\n    dispatch(setAlbums(albumsResult));\r\n}","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getBand } from '../stores/band-page-store';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connectAdvanced, connect } from 'react-redux';\r\nimport { Typography, Box, TableCell, Link, TableRow, Grid, Avatar } from '@material-ui/core';\r\nimport { TableHeader, TableGrid } from '../components/grid';\r\nimport { generatePath } from 'react-router';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { ROUTES } from '../lib/consts';\r\nimport moment from 'moment';\r\nimport AlbumCard from '../components/album-card';\r\nimport { onInAlbumPlay } from '../stores/player-store';\r\nimport BandCard from '../components/band-card';\r\n\r\nexport interface BandPageProps {\r\n    match: {\r\n        params: {\r\n            bandName: string;\r\n        }\r\n    }\r\n\r\n    band?: Models.Band;\r\n    albums: Models.Album[];\r\n    init: (id: string) => void;\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) => void;\r\n    onAlbumPlay: (songs: Models.Song[]) => void;\r\n}\r\n\r\nconst BandPage2 = (props: BandPageProps) => {\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName);\r\n    }, []);\r\n\r\n    return (\r\n        <>{\r\n            props.band ?\r\n                <>\r\n                    <Box alignContent=\"center\">\r\n                    <Avatar src={props.band.logo} style={{width:\"400px\", height:\"400px\", margin: \"0 auto 0\"}} />\r\n                    <Typography variant=\"h3\" align=\"center\">{props.band.name}</Typography>\r\n                    </Box>\r\n                    {/* <BandCard logo={props.band.logo} bandName={props.band.name} /> */}\r\n                    <Grid container>\r\n                        {\r\n                            props.albums.map(album => {\r\n                                return (\r\n                                    <Grid item xs={12} key={album.id}>\r\n                                        <AlbumCard\r\n                                            bandId={props.match.params.bandName}\r\n                                            albumId={album.id}\r\n                                            name={album.name}\r\n                                            year={album.year}\r\n                                            length={album.length}\r\n                                            cover={album.cover}\r\n                                            songs={album.songs}\r\n                                            onAlbumPlay={props.onAlbumPlay}\r\n                                            onSongPlay={props.onSongPlay} />\r\n                                    </Grid>)\r\n                            })\r\n                        }\r\n\r\n                    </Grid>\r\n                </> : null}</>\r\n    )\r\n}\r\n\r\nconst BandPage = (props: BandPageProps) => {\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName);\r\n    }, []);\r\n\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"year\"\r\n        },\r\n        {\r\n            title: \"length\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Album) => JSX.Element = (row: Models.Album) => {\r\n        const url = generatePath(ROUTES.ALBUM_PAGE, {\r\n            bandName: props.match.params.bandName,\r\n            albumName: row.id\r\n        });\r\n        console.log(url);\r\n\r\n        return (<TableRow key={row.id} >\r\n            <TableCell><Link component={RouterLink} to={url}>{row.name}</Link></TableCell>\r\n            <TableCell>{row.year}</TableCell>\r\n            <TableCell>{moment.utc(row.length * 1000).format('mm:ss')}</TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.band ?\r\n                    <Box>\r\n                        <Typography>{props.band!.name}</Typography>\r\n                        <TableGrid<Models.Album> headers={titles} rowRenderer={rowRenderer} data={props.albums} />\r\n                    </Box>\r\n                    : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    init: (id: string) => {\r\n        dispatch(getBand(id));\r\n    },\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) => {\r\n        dispatch(onInAlbumPlay(songs, songToPlay));\r\n    },\r\n    onAlbumPlay: (songs: Models.Song[]) => {\r\n        dispatch(onInAlbumPlay(songs, songs[0]));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        band: state.bandPage.band,\r\n        albums: state.bandPage.albums\r\n    };\r\n}\r\n\r\nconst BandPageContainer = connect(mapStateToProps, mapDispatchToProps)(BandPage2);\r\n\r\nexport default BandPageContainer;","import React from 'react';\r\nimport { Box, LinearProgress, Typography, Grid, Button, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, TableCell, TableRow, Paper } from '@material-ui/core';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connect } from 'react-redux';\r\nimport * as PlayerStore from '../stores/player-store';\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport 'react-h5-audio-player/lib/styles.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { TableGrid } from './grid';\r\nimport moment from 'moment';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\n\r\n\r\nexport interface PlayerProps {\r\n    currentPlay?: Models.Song;\r\n    playlist: Models.Song[];\r\n    playingIndex: number;\r\n    // autoplay: boolean;\r\n    isPlaying: boolean;\r\n    // setAutoplay: (val: boolean) => void;\r\n    setIsPlaying: (val: boolean) => void;\r\n    onNext: () => void;\r\n    onPrevious: () => void;\r\n    onSongPlaylistPlay: (song: Models.Song) => void;\r\n}\r\n\r\nconst _Player = (props: PlayerProps) => {\r\n    const songRowRenderer = (row: Models.Song) => {\r\n        return (<TableRow selected={props.playlist.indexOf(row) == props.playingIndex}>\r\n            <TableCell>{row.name}</TableCell>\r\n            <TableCell>{moment.utc(row.lenght * 1000).format('mm:ss')}</TableCell>\r\n            <TableCell><Button onClick={() => { props.onSongPlaylistPlay(row) }} ><PlayCircleOutlineIcon /></Button></TableCell>\r\n        </TableRow>);\r\n    }\r\n    return (\r\n        <>\r\n            {props.playlist.length != 0 ?\r\n                <Paper style={{ position: 'fixed', bottom: 0, left: 0, width: \"100%\",  maxHeight: \"100%\", borderTop: \"1px black\" }}>\r\n                    <Typography>{props.currentPlay ? props.currentPlay.name : \"\"}</Typography>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary\r\n                            expandIcon={props.playlist.length <= 1 ? null : <ExpandMoreIcon />}\r\n                            aria-controls=\"panel1bh-content\"\r\n                            id=\"panel1bh-header\"\r\n                        >\r\n                            <AudioPlayer\r\n                                autoPlay\r\n                                src={props.currentPlay ? props.currentPlay.playUrl : \"\"}\r\n                                showSkipControls={props.playlist.length > 1}\r\n                                onClickNext={props.onNext}\r\n                                onClickPrevious={props.onPrevious}\r\n                                onEnded={props.onNext}\r\n                                onPlay={e => console.log(\"onPlay\")}\r\n                            />\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails style={{ maxHeight: \"400px\" }}>\r\n                            <Box style={{ overflow: \"auto\", width: \"100%\", maxHeight: \"inherit\" }}>\r\n                                <TableGrid<Models.Song> data={props.playlist} headers={[]} rowRenderer={songRowRenderer} />\r\n                            </Box>\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n                </Paper> : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    setIsPlaying: (val: boolean) => {\r\n        dispatch(PlayerStore.setIsPlaying(val))\r\n    },\r\n    onNext: () => {\r\n        dispatch(PlayerStore.onPlayNext());\r\n    },\r\n    onPrevious: () => {\r\n        dispatch(PlayerStore.onPlayPrevious());\r\n    },\r\n    onSongPlaylistPlay: (song: Models.Song) => {\r\n        dispatch(PlayerStore.onSongPlaylistPlay(song));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    const getCurrentPlay = () => {\r\n        if (state.player.playlist.length == 0) {\r\n            return undefined;\r\n        }\r\n        if (state.player.playlist.length == 1) {\r\n            return state.player.playlist[0];\r\n        }\r\n        return state.player.playlist[state.player.currentPlayingIndex];\r\n    }\r\n\r\n    var curPlay = getCurrentPlay();\r\n    console.log(\"CurentPlay: \", curPlay);\r\n\r\n    return {\r\n        currentPlay: getCurrentPlay(),\r\n        playlist: state.player.playlist,\r\n        isPlaying: state.player.isPlaying,\r\n        playingIndex: state.player.currentPlayingIndex\r\n    };\r\n}\r\n\r\nconst Player = connect(mapStateToProps, mapDispatchToProps)(_Player);\r\n\r\nexport default Player;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Box, Typography, Paper } from '@material-ui/core';\nimport MainPageContainer from './pages/main-page';\nimport { ROUTES } from './lib/consts';\nimport { Route } from 'react-router';\nimport AlbumPage from './pages/album-page';\nimport BandPageContainer from './pages/band-page';\nimport { HashRouter } from 'react-router-dom';\nimport Player from './components/player';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Paper>\n        <Box pb=\"120px\">\n          <Typography align=\"center\" variant=\"h2\">MK Metal Archive</Typography>\n          <Route exact path={ROUTES.BAND_LIST} component={MainPageContainer} />\n          <Route exact path={ROUTES.BAND_PAGE} component={BandPageContainer} />\n          <Route exact path={ROUTES.ALBUM_PAGE} component={AlbumPage} />\n        </Box>\n        <Player />\n      </Paper>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as BandListStore from './band-list-store';\r\nimport * as BandPageStore from './band-page-store';\r\nimport * as AlbumPageStore from './album-page-store';\r\nimport * as PlayerStore from './player-store';\r\n\r\n\r\nconst reducers = {\r\n    bandList: BandListStore.slice.reducer,\r\n    bandPage: BandPageStore.slice.reducer,\r\n    albumPage: AlbumPageStore.slice.reducer,\r\n    player: PlayerStore.slice.reducer\r\n};\r\n\r\nexport {reducers};","import { History } from 'history';\r\nimport ApplicationState from './application-state';\r\nimport { getDefaultMiddleware, configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\r\nimport { reducers } from './root-reducer';\r\n\r\nfunction configureAppStore(history: History) {\r\n    const middleware = [...getDefaultMiddleware(), routerMiddleware(history)];\r\n\r\n    const store = configureStore({\r\n        reducer: getRootReducer(history),\r\n        middleware: middleware\r\n    });\r\n\r\n    return store;\r\n}\r\n\r\nfunction getRootReducer(history: History) {\r\n    return combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n}\r\n\r\nexport default configureAppStore;","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    // create theme here\r\n    palette:{\r\n        type: \"dark\"\r\n    }\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createBrowserHistory } from 'history';\nimport configureAppStore from './stores/configure-store';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nconst history = createBrowserHistory({ basename: window.location.host });\nconst store = configureAppStore(history);\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}