{"version":3,"sources":["services/band-service.ts","stores/band-list-store.ts","components/grid.tsx","lib/consts.ts","pages/main-page.tsx","stores/album-page-store.ts","pages/album-page.tsx","stores/band-page-store.ts","pages/band-page.tsx","App.tsx","serviceWorker.ts","stores/root-reducer.ts","stores/configure-store.ts","theme/index.ts","index.tsx"],"names":["resolveUrl","url","getAllBands","a","axios","get","bandLinks","data","getMultipleFromLinkList","getBand","key","bandLink","find","x","id","linkToData","band","Promise","resolve","getBandAlbums","albums","albumList","getAlbum","bandKey","albumKey","album","links","promises","forEach","push","then","result","all","slice","createSlice","name","initialState","allBands","displayBands","reducers","setAllBands","state","action","payload","setDisplayBands","actions","TableGrid","props","TableContainer","Table","size","TableHead","TableRow","headers","map","TableCell","title","TableBody","rowRenderer","ROUTES","MainPageContainer","connect","gridData","bandList","dispatch","store","BandService","console","log","React","useEffect","row","generatePath","bandName","Link","component","RouterLink","to","genre","location","status","setAlbum","AlbumPageContainer","albumPage","init","albumResult","match","params","albumName","Box","Typography","lenght","songs","setBand","setAlbums","BandPageContainer","bandPage","bandResult","albumsResult","year","length","App","align","variant","exact","path","AlbumPage","Boolean","window","hostname","BandListStore","reducer","BandPageStore","AlbumPageStore","getRootReducer","history","combineReducers","router","connectRouter","configureAppStore","middleware","getDefaultMiddleware","routerMiddleware","configureStore","theme","createMuiTheme","createBrowserHistory","basename","host","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAEMA,EAAa,SAACC,GAMZ,MAAO,wBAA0BA,GAInCC,EAAW,uCAAG,4BAAAC,EAAA,sEACOC,IAAMC,IAAuBL,EAAW,cAD/C,cACZM,EADY,OAC8DC,KAD9D,kBAETC,EAAqCF,IAF5B,2CAAH,qDAKXG,EAAO,uCAAG,WAAOC,GAAP,mBAAAP,EAAA,sEACWC,IAAMC,IAAIL,EAAW,cADhC,cACRM,EADQ,OAC+CC,KACvDI,EAAWL,EAAUM,MAAK,SAAAC,GAAC,OAAEA,EAAEC,IAAMJ,KAF7B,SAGMN,IAAMC,IAAIL,EAAWW,EAASI,aAHpC,cAGRC,EAHQ,OAGkDT,KAHlD,kBAKLU,QAAQC,QAAQF,IALX,2CAAH,sDAQPG,EAAa,uCAAG,WAAMT,GAAN,qBAAAP,EAAA,sEACKC,IAAMC,IAAuBL,EAAW,cAD7C,cACdM,EADc,OAC4DC,KAC1EI,EAAWL,EAAUM,MAAK,SAAAC,GAAC,OAAEA,EAAEC,IAAMJ,KAFvB,SAGAN,IAAMC,IAAiBL,EAAWW,EAASI,aAH3C,cAGdC,EAHc,OAGyDT,KAHzD,SAIIC,EAAsCQ,EAAKI,QAJ/C,cAIdC,EAJc,yBAKXJ,QAAQC,QAAQG,IALL,4CAAH,sDAQbC,EAAQ,uCAAG,WAAMC,EAAiBC,GAAvB,iBAAArB,EAAA,sEACMgB,EAAcI,GADpB,cACTH,EADS,OAETK,EAAQL,EAAOR,MAAK,SAAAC,GAAC,OAAEA,EAAEC,IAAMU,KAFtB,kBAINP,QAAQC,QAAQO,IAJV,2CAAH,wDAORjB,EAAuB,uCAAG,WAASkB,GAAT,iBAAAvB,EAAA,6DACxBwB,EAA4B,GAC5BpB,EAAY,GAEhBmB,EAAME,SAAQ,SAAAf,GACVc,EAASE,KAAKzB,IAAMC,IAAOL,EAAWa,EAAEE,aAAae,MAAK,SAACC,GACvDxB,EAAKsB,KAAKE,EAAOxB,aANG,SAUtBU,QAAQe,IAAIL,GAVU,gCAWrBV,QAAQC,QAAQX,IAXK,2CAAH,sDC1BhB0B,EAAQC,YAAY,CAC7BC,KAAM,aACNC,aAPmC,CACnCC,SAAU,GACVC,aAAc,IAMdC,SAAU,CACNC,YAAa,SAACC,EAAkBC,GAC5BD,EAAMJ,SAAWK,EAAOC,SAE5BC,gBAAiB,SAACH,EAAkBC,GAChCD,EAAMH,aAAeI,EAAOC,Y,EAKQV,EAAMY,QAA1BD,G,EAAbJ,Y,EAAaI,iB,8DCdtBE,EAAY,SAAaC,GAC3B,OAAQ,kBAACC,EAAA,EAAD,KACJ,kBAACC,EAAA,EAAD,CAAOC,KAAK,UACR,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEQL,EAAMM,QAAQC,KAAI,SAAAzC,GAAC,OAAI,kBAAC0C,EAAA,EAAD,CAAW7C,IAAKG,EAAE2C,OAAQ3C,EAAE2C,YAI/D,kBAACC,EAAA,EAAD,KAGQV,EAAMxC,KAAK+C,KAAI,SAAAzC,GAAC,OAAIkC,EAAMW,YAAY7C,U,wBC1B7C8C,EACE,IADFA,EAEE,kBAFFA,EAGG,mCC+DDC,EAFWC,aANF,SAACpB,GACrB,MAAO,CACHqB,SAAUrB,EAAMsB,SAASzB,iBARN,SAAC0B,GAAD,MAA4B,CACnD9D,YAAa,WACT8D,EHvBmB,uCAAgB,WAAOA,EAAUC,GAAjB,eAAA9D,EAAA,sEACpB+D,IADoB,OACnCnC,EADmC,OAEvCiC,EAASpB,EAAgBb,IACzBoC,QAAQC,IAAIrC,GAH2B,2CAAhB,6DGiCD8B,EAhDT,SAACd,GAiCd,OAHAsB,IAAMC,WAAU,WACZvB,EAAM7C,gBACP,IACI,kBAAC,EAAD,CAAwBmD,QAhCD,CAC1B,CACIG,MAAO,QAEX,CACIA,MAAO,SAEX,CACIA,MAAO,YAEX,CACIA,MAAO,WAqBiCE,YAjBO,SAACa,GACpD,IAAMtE,EAAMuE,YAAab,EAAkB,CACvCc,SAAUF,EAAIzD,KAIlB,OAFAqD,QAAQC,IAAInE,GAEJ,kBAACmD,EAAA,EAAD,KACJ,kBAACG,EAAA,EAAD,KAAW,kBAACmB,EAAA,EAAD,CAAMC,UAAWC,IAAYC,GAAI5E,GAAMsE,EAAIpC,OACtD,kBAACoB,EAAA,EAAD,KAAYgB,EAAIO,OAChB,kBAACvB,EAAA,EAAD,KAAYgB,EAAIQ,UAChB,kBAACxB,EAAA,EAAD,KAAYgB,EAAIS,UAOkDzE,KAAMwC,EAAMe,cCrC7E7B,EAAQC,YAAY,CAC7BC,KAAM,mBACNC,aALwC,GAMxCG,SAAU,CACN0C,SAAU,SAACxC,EAAuBC,GAC9BD,EAAMhB,MAAQiB,EAAOC,YAKlBsC,EAAahD,EAAMY,QAAnBoC,SCsDAC,EAFYrB,aANH,SAACpB,GACrB,MAAO,CACHhB,MAAOgB,EAAM0C,UAAU1D,UARJ,SAACuC,GAAD,MAA4B,CACnDoB,KAAM,SAAC7D,EAAiBC,GACpBwC,EDtCgB,SAACzC,EAAiBC,GAAlB,8CAAiD,WAAOwC,EAAUC,GAAjB,eAAA9D,EAAA,sEAC7C+D,EAAqB3C,EAAQC,GADgB,OACjE6D,EADiE,OAErElB,QAAQC,IAAIiB,GACZrB,EAASiB,EAASI,IAHmD,2CAAjD,wDCsCP/D,CAASC,EAASC,QAURqC,EApDT,SAACd,GACfsB,IAAMC,WAAU,WACZvB,EAAMqC,KAAKrC,EAAMuC,MAAMC,OAAOd,SAAU1B,EAAMuC,MAAMC,OAAOC,aAC5D,IAsBH,OAHGzC,EAAMtB,OACL0C,QAAQC,IAAI,QAAUrB,EAAMtB,OAG5B,oCAEQsB,EAAMtB,MACF,kBAACgE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAa3C,EAAMtB,MAAOU,MAC1B,kBAAC,EAAD,CAAwBkB,QA1Bd,CAC1B,CACIG,MAAO,QAEX,CACIA,MAAO,WAqB8CE,YAjBN,SAACa,GAEpD,OAAQ,kBAACnB,EAAA,EAAD,KACJ,kBAACG,EAAA,EAAD,KAAYgB,EAAIpC,MAChB,kBAACoB,EAAA,EAAD,KAAYgB,EAAIoB,UAa+DpF,KAAMwC,EAAMtB,MAAMmE,SAEvF,SCzCT3D,EAAQC,YAAY,CAC7BC,KAAM,kBACNC,aANuC,CACvChB,OAAQ,IAMRmB,SAAU,CACNsD,QAAS,SAACpD,EAAsBC,GAC5BD,EAAMzB,KAAO0B,EAAOC,SAExBmD,UAAW,SAACrD,EAAsBC,GAC9BD,EAAMrB,OAASsB,EAAOC,Y,EAKIV,EAAMY,QAA7BgD,E,EAAAA,QAASC,E,EAAAA,UC0DTC,EAFWlC,aAPF,SAACpB,GACrB,MAAO,CACHzB,KAAMyB,EAAMuD,SAAShF,KACrBI,OAAQqB,EAAMuD,SAAS5E,WATJ,SAAC4C,GAAD,MAA4B,CACnDoB,KAAM,SAACtE,GACHkD,EDzCe,SAAClD,GAAD,8CAA0B,WAAOkD,EAAUC,GAAjB,iBAAA9D,EAAA,sEACtB+D,EAAoBpD,GADE,cACzCmF,EADyC,gBAEpB/B,EAAkD+B,EAAW7E,QAFzC,OAEzC8E,EAFyC,OAG7ClC,EAAS6B,EAAQI,IACjBjC,EAAS8B,EAAUI,IAJ0B,2CAA1B,wDCyCNzF,CAAQK,QAWC+C,EA3DT,SAACd,GACdsB,IAAMC,WAAU,WACZvB,EAAMqC,KAAKrC,EAAMuC,MAAMC,OAAOd,YAC/B,IA4BH,OACI,oCAEQ1B,EAAM/B,KACF,kBAACyE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAa3C,EAAM/B,KAAMmB,MACzB,kBAAC,EAAD,CAAyBkB,QAhCf,CAC1B,CACIG,MAAO,QAEX,CACIA,MAAO,QAEX,CACIA,MAAO,WAwB+CE,YApBN,SAACa,GACrD,IAAMtE,EAAMuE,YAAab,EAAmB,CACxCc,SAAU1B,EAAMuC,MAAMC,OAAOd,SAC7Be,UAAWjB,EAAIzD,KAInB,OAFAqD,QAAQC,IAAInE,GAEJ,kBAACmD,EAAA,EAAD,KACJ,kBAACG,EAAA,EAAD,KAAW,kBAACmB,EAAA,EAAD,CAAMC,UAAWC,IAAYC,GAAI5E,GAAMsE,EAAIpC,OACtD,kBAACoB,EAAA,EAAD,KAAYgB,EAAI4B,MAChB,kBAAC5C,EAAA,EAAD,KAAYgB,EAAI6B,UAUgE7F,KAAMwC,EAAM3B,UAElF,SCvCPiF,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYY,MAAM,SAASC,QAAQ,MAAnC,oBACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM9C,EAAkBgB,UAAWf,IAChD,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAM9C,EAAkBgB,UAAWoB,IAChD,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAM9C,EAAmBgB,UAAW+B,OCNrCC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASvB,MACvB,2D,oDCdA/C,GAAW,CACbwB,SAAU+C,EAAoBC,QAC9Bf,SAAUgB,EAAoBD,QAC9B5B,UAAW8B,EAAqBF,SCUpC,SAASG,GAAeC,GACpB,OAAOC,YAAgB,eAChB7E,GADe,CAElB8E,OAAQC,YAAcH,MAIfI,OAlBf,SAA2BJ,GACvB,IAAMK,EAAU,sBAAOC,eAAP,CAA+BC,YAAiBP,KAOhE,OALcQ,YAAe,CACzBZ,QAASG,GAAeC,GACxBK,WAAYA,K,mBCLLI,GAJDC,aAAe,ICUvBV,GAAUW,YAAqB,CAAEC,SAAUnB,OAAO7B,SAASiD,OAC3D/D,GAAQsD,GAAkBJ,IAEhCc,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUlE,MAAOA,IACf,kBAAC,IAAD,CAAiBkD,QAASA,IACxB,kBAACiB,GAAA,EAAD,CAAeR,MAAOA,IACpB,kBAAC,EAAD,UAMRS,SAASC,eAAe,SJgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3G,MAAK,SAAA4G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1E,QAAQ0E,MAAMA,EAAMC,a","file":"static/js/main.dff093d2.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\n\r\nconst resolveUrl = (url: string) => {\r\n    // if dev use next\r\n    if(process.env.NODE_ENV == \"development\"){\r\n\r\n        return \"/data/\" + url;\r\n    }else{\r\n        return \"/mkmetalarchive/data/\" + url;\r\n    }\r\n}\r\n\r\nconst getAllBands = async () => {\r\n    var bandLinks = (await axios.get<Models.DataLink[]>(resolveUrl(\"data.json\"))).data;\r\n    return getMultipleFromLinkList<Models.Band>(bandLinks);\r\n}\r\n\r\nconst getBand = async (key: string) => {\r\n    var bandLinks = (await axios.get(resolveUrl(\"data.json\"))).data as Models.DataLink[];\r\n    var bandLink = bandLinks.find(x=>x.id == key)!;\r\n    var band = (await axios.get(resolveUrl(bandLink.linkToData))).data as Models.Band;\r\n    \r\n    return Promise.resolve(band);\r\n}\r\n\r\nconst getBandAlbums = async(key: string) => {\r\n    var bandLinks = (await axios.get<Models.DataLink[]>(resolveUrl(\"data.json\"))).data;\r\n    var bandLink = bandLinks.find(x=>x.id == key)!;\r\n    var band = (await axios.get<Models.Band>(resolveUrl(bandLink.linkToData))).data;\r\n    var albumList = await getMultipleFromLinkList<Models.Album>(band.albums);\r\n    return Promise.resolve(albumList);\r\n}\r\n\r\nconst getAlbum = async(bandKey: string, albumKey: string) =>{\r\n    var albums = await getBandAlbums(bandKey);\r\n    var album = albums.find(x=>x.id == albumKey);\r\n\r\n    return Promise.resolve(album);\r\n}\r\n\r\nconst getMultipleFromLinkList = async<T>(links:Models.DataLink[]) =>{\r\n    var promises: Promise<void>[] = [];\r\n    var data: T[] = [];\r\n\r\n    links.forEach(x => {\r\n        promises.push(axios.get<T>(resolveUrl(x.linkToData)).then((result) => {\r\n            data.push(result.data);\r\n        }));\r\n    });\r\n\r\n    await Promise.all(promises);\r\n    return Promise.resolve(data);\r\n}\r\n\r\n\r\nexport { getAllBands, getBand, getMultipleFromLinkList, getBandAlbums, getAlbum};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\nexport interface BandStore {\r\n    allBands: Models.Band[],\r\n    displayBands: Models.Band[]\r\n}\r\n\r\nexport const initialState: BandStore = {\r\n    allBands: [],\r\n    displayBands: []\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"band-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAllBands: (state: BandStore, action: PayloadAction<Models.Band[]>) => {\r\n            state.allBands = action.payload;\r\n        },\r\n        setDisplayBands: (state: BandStore, action: PayloadAction<Models.Band[]>) => {\r\n            state.displayBands = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setAllBands, setDisplayBands } = slice.actions;\r\n\r\n// thunks\r\n\r\nexport const getAllBands = (): AppThunk => async (dispatch, store) => {\r\n    var result = await BandService.getAllBands();\r\n    dispatch(setDisplayBands(result));\r\n    console.log(result);\r\n}","import React from 'react';\r\nimport { TableContainer, Table, TableHead, TableCell, TableRow, TableBody } from '@material-ui/core';\r\n\r\nexport interface TableProps<T> {\r\n    data: T[];\r\n    headers: TableHeader[];\r\n    rowRenderer: (row: T) => JSX.Element;\r\n}\r\n\r\nexport interface TableHeader {\r\n    title: string;\r\n}\r\n\r\nconst TableGrid = function <T>(props: TableProps<T>) {\r\n    return (<TableContainer>\r\n        <Table size=\"medium\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    {\r\n                        props.headers.map(x => <TableCell key={x.title}>{x.title}</TableCell>)\r\n                    }\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    \r\n                    props.data.map(x => props.rowRenderer(x))\r\n                    \r\n                }\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>);\r\n}\r\n\r\nexport { TableGrid };","export const ROUTES = {\r\n    BAND_LIST: \"/\",\r\n    BAND_PAGE: \"/band/:bandName\",\r\n    ALBUM_PAGE: \"/band/:bandName/album/:albumName\"\r\n}","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getAllBands } from '../stores/band-list-store';\r\nimport { connect } from 'react-redux';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { TableGrid, TableHeader } from '../components/grid';\r\nimport { TableRow, TableCell, Link } from '@material-ui/core';\r\nimport { generatePath} from 'react-router';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport { ROUTES } from '../lib/consts';\r\n\r\ninterface MainPageProps {\r\n    getAllBands: () => void;\r\n    gridData: Models.Band[];\r\n}\r\n\r\nconst MainPage = (props: MainPageProps) => {\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"genre\"\r\n        },\r\n        {\r\n            title: \"location\"\r\n        },\r\n        {\r\n            title: \"Status\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Band) => JSX.Element = (row: Models.Band) => {\r\n        const url = generatePath(ROUTES.BAND_PAGE, {\r\n            bandName: row.id\r\n        });\r\n        console.log(url);\r\n        \r\n        return (<TableRow>\r\n            <TableCell><Link component={RouterLink} to={url}>{row.name}</Link></TableCell>\r\n            <TableCell>{row.genre}</TableCell>\r\n            <TableCell>{row.location}</TableCell>\r\n            <TableCell>{row.status}</TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        props.getAllBands();\r\n    }, []);\r\n    return <TableGrid<Models.Band> headers={titles} rowRenderer={rowRenderer} data={props.gridData}  />;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    getAllBands: () => {\r\n        dispatch(getAllBands());\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        gridData: state.bandList.displayBands\r\n    };\r\n}\r\n\r\nconst MainPageContainer = connect(mapStateToProps, mapDispatchToProps)(MainPage);\r\n\r\nexport default MainPageContainer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface AlbumPageStore {\r\n    album?: Models.Album;\r\n}\r\n\r\nexport const initialState: AlbumPageStore = {\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"album-page-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAlbum: (state: AlbumPageStore, action: PayloadAction<Models.Album | undefined>) => {\r\n            state.album = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setAlbum } = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const getAlbum = (bandKey: string, albumKey: string): AppThunk => async (dispatch, store) => {\r\n    var albumResult = await BandService.getAlbum(bandKey,albumKey);\r\n    console.log(albumResult);\r\n    dispatch(setAlbum(albumResult));\r\n}","import React from 'react';\r\nimport { TableHeader, TableGrid } from '../components/grid';\r\nimport { generatePath } from 'react-router';\r\nimport { ROUTES } from '../lib/consts';\r\nimport { TableRow, TableCell, Link, Box, Typography } from '@material-ui/core';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getAlbum } from '../stores/album-page-store';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connect } from 'react-redux';\r\n\r\nexport interface AlbumPageProps {\r\n    match: {\r\n        params: {\r\n            bandName: string;\r\n            albumName: string;\r\n        }\r\n    }\r\n\r\n    album?: Models.Album;\r\n    init: (bandKey: string, albumKey: string) => void;\r\n}\r\n\r\nconst AlbumPage = (props: AlbumPageProps) =>{\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName, props.match.params.albumName);\r\n    }, []);\r\n\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"length\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Song) => JSX.Element = (row: Models.Song) => {\r\n        \r\n        return (<TableRow>\r\n            <TableCell>{row.name}</TableCell>\r\n            <TableCell>{row.lenght}</TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n    if(props.album){\r\n        console.log(\"props\" , props.album);\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                props.album ?\r\n                    <Box>\r\n                        <Typography>{props.album!.name}</Typography>\r\n                        <TableGrid<Models.Song> headers={titles} rowRenderer={rowRenderer} data={props.album.songs}  />\r\n                    </Box>\r\n                    : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    init: (bandKey: string, albumKey: string) => {\r\n        dispatch(getAlbum(bandKey, albumKey));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        album: state.albumPage.album\r\n    };\r\n}\r\n\r\nconst AlbumPageContainer = connect(mapStateToProps, mapDispatchToProps)(AlbumPage);\r\n\r\nexport default AlbumPageContainer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface BandPageStore {\r\n    band?: Models.Band;\r\n    albums: Models.Album[];\r\n}\r\n\r\nexport const initialState: BandPageStore = {\r\n    albums: []\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"band-page-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setBand: (state: BandPageStore, action: PayloadAction<Models.Band | undefined>) => {\r\n            state.band = action.payload;\r\n        },\r\n        setAlbums: (state: BandPageStore, action: PayloadAction<Models.Album[]>)=>{\r\n            state.albums = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setBand, setAlbums } = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const getBand = (id: string): AppThunk => async (dispatch, store) => {\r\n    var bandResult = await BandService.getBand(id);\r\n    var albumsResult = await BandService.getMultipleFromLinkList<Models.Album>(bandResult.albums);\r\n    dispatch(setBand(bandResult));\r\n    dispatch(setAlbums(albumsResult));\r\n}","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getBand } from '../stores/band-page-store';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connectAdvanced, connect } from 'react-redux';\r\nimport { Typography, Box, TableCell, Link, TableRow } from '@material-ui/core';\r\nimport { TableHeader, TableGrid } from '../components/grid';\r\nimport { generatePath } from 'react-router';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport { ROUTES } from '../lib/consts';\r\n\r\n\r\nexport interface BandPageProps {\r\n    match: {\r\n        params: {\r\n            bandName: string;\r\n        }\r\n    }\r\n\r\n    band?: Models.Band;\r\n    albums: Models.Album[];\r\n    init: (id: string) => void;\r\n}\r\n\r\nconst BandPage = (props: BandPageProps) => {\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName);\r\n    }, []);\r\n\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"year\"\r\n        },\r\n        {\r\n            title: \"length\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Album) => JSX.Element = (row: Models.Album) => {\r\n        const url = generatePath(ROUTES.ALBUM_PAGE, {\r\n            bandName: props.match.params.bandName,\r\n            albumName: row.id\r\n        });\r\n        console.log(url);\r\n        \r\n        return (<TableRow>\r\n            <TableCell><Link component={RouterLink} to={url}>{row.name}</Link></TableCell>\r\n            <TableCell>{row.year}</TableCell>\r\n            <TableCell>{row.length}</TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.band ?\r\n                    <Box>\r\n                        <Typography>{props.band!.name}</Typography>\r\n                        <TableGrid<Models.Album> headers={titles} rowRenderer={rowRenderer} data={props.albums}  />\r\n                    </Box>\r\n                    : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    init: (id: string) => {\r\n        dispatch(getBand(id));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        band: state.bandPage.band,\r\n        albums: state.bandPage.albums\r\n    };\r\n}\r\n\r\nconst BandPageContainer = connect(mapStateToProps, mapDispatchToProps)(BandPage);\r\n\r\nexport default BandPageContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Box, Typography } from '@material-ui/core';\nimport MainPageContainer from './pages/main-page';\nimport { ROUTES } from './lib/consts';\nimport { Route } from 'react-router';\nimport AlbumPage from './pages/album-page';\nimport BandPageContainer from './pages/band-page';\nimport { HashRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Box>\n        <Typography align=\"center\" variant=\"h2\">MK Metal Archive</Typography>\n        <Route exact path={ROUTES.BAND_LIST} component={MainPageContainer} />\n        <Route exact path={ROUTES.BAND_PAGE} component={BandPageContainer} />\n        <Route exact path={ROUTES.ALBUM_PAGE} component={AlbumPage} />\n      </Box>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as BandListStore from './band-list-store';\r\nimport * as BandPageStore from './band-page-store';\r\nimport * as AlbumPageStore from './album-page-store';\r\n\r\nconst reducers = {\r\n    bandList: BandListStore.slice.reducer,\r\n    bandPage: BandPageStore.slice.reducer,\r\n    albumPage: AlbumPageStore.slice.reducer\r\n};\r\n\r\nexport {reducers};","import { History } from 'history';\r\nimport ApplicationState from './application-state';\r\nimport { getDefaultMiddleware, configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\r\nimport { reducers } from './root-reducer';\r\n\r\nfunction configureAppStore(history: History) {\r\n    const middleware = [...getDefaultMiddleware(), routerMiddleware(history)];\r\n\r\n    const store = configureStore({\r\n        reducer: getRootReducer(history),\r\n        middleware: middleware\r\n    });\r\n\r\n    return store;\r\n}\r\n\r\nfunction getRootReducer(history: History) {\r\n    return combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n}\r\n\r\nexport default configureAppStore;","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    // create theme here\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createBrowserHistory } from 'history';\nimport configureAppStore from './stores/configure-store';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nconst history = createBrowserHistory({ basename: window.location.host });\nconst store = configureAppStore(history);\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}