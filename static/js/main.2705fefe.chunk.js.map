{"version":3,"sources":["services/band-service.ts","stores/band-list-store.ts","components/grid.tsx","lib/consts.ts","pages/main-page.tsx","stores/album-page-store.ts","stores/player-store.ts","components/player.tsx","pages/album-page.tsx","stores/band-page-store.ts","pages/band-page.tsx","App.tsx","serviceWorker.ts","stores/root-reducer.ts","stores/configure-store.ts","theme/index.ts","index.tsx"],"names":["resolveUrl","url","getAllBands","a","console","log","axios","get","bandLinks","data","getMultipleFromLinkList","getBand","key","bandLink","find","x","id","linkToData","band","Promise","resolve","getBandAlbums","albums","albumList","getAlbum","bandKey","albumKey","album","links","promises","forEach","push","then","result","all","slice","createSlice","name","initialState","allBands","displayBands","reducers","setAllBands","state","action","payload","setDisplayBands","actions","TableGrid","props","TableContainer","Table","size","TableHead","TableRow","headers","map","TableCell","title","TableBody","i","rowRenderer","ROUTES","MainPageContainer","connect","gridData","bandList","dispatch","store","BandService","React","useEffect","row","generatePath","bandName","Link","component","RouterLink","to","genre","location","status","setAlbum","playlist","isPlaying","currentPlayingIndex","setPlaylist","setIsPlaying","setCurrentPlayingIndex","Player","getCurrentPlay","player","length","curPlay","currentPlay","val","PlayerStore","onNext","newIndex","onPrevious","Box","Typography","autoPlay","src","showSkipControls","onClickNext","onClickPrevious","onEnded","onPlay","e","AlbumPageContainer","albumPage","init","albumResult","onSongPlay","songs","songToPlay","toPlay","songIndex","indexOf","playUrl","onInAlbumPlay","match","params","albumName","moment","utc","lenght","format","Button","onClick","setBand","setAlbums","BandPageContainer","bandPage","bandResult","albumsResult","year","App","align","variant","exact","path","AlbumPage","Boolean","window","hostname","BandListStore","reducer","BandPageStore","AlbumPageStore","getRootReducer","history","combineReducers","router","connectRouter","configureAppStore","middleware","getDefaultMiddleware","routerMiddleware","configureStore","theme","createMuiTheme","createBrowserHistory","basename","host","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2705fefe.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\n\r\nconst resolveUrl = (url: string) => {\r\n    // if dev use next\r\n    if(process.env.NODE_ENV == \"development\"){\r\n        console.log(process.env.NODE_ENV);\r\n        return \"/mkmetalarchive/data/\" + url;\r\n    }else{\r\n        return \"/mkmetalarchive/data/\" + url;\r\n    }\r\n}\r\n\r\nconst getAllBands = async () => {\r\n    console.log(resolveUrl(\"data.json\"));\r\n    var bandLinks = (await axios.get<Models.DataLink[]>(resolveUrl(\"data.json\"))).data;\r\n    return getMultipleFromLinkList<Models.Band>(bandLinks);\r\n}\r\n\r\nconst getBand = async (key: string) => {\r\n    var bandLinks = (await axios.get(resolveUrl(\"data.json\"))).data as Models.DataLink[];\r\n    var bandLink = bandLinks.find(x=>x.id == key)!;\r\n    var band = (await axios.get(resolveUrl(bandLink.linkToData))).data as Models.Band;\r\n    \r\n    return Promise.resolve(band);\r\n}\r\n\r\nconst getBandAlbums = async(key: string) => {\r\n    var bandLinks = (await axios.get<Models.DataLink[]>(resolveUrl(\"data.json\"))).data;\r\n    var bandLink = bandLinks.find(x=>x.id == key)!;\r\n    var band = (await axios.get<Models.Band>(resolveUrl(bandLink.linkToData))).data;\r\n    var albumList = await getMultipleFromLinkList<Models.Album>(band.albums);\r\n    return Promise.resolve(albumList);\r\n}\r\n\r\nconst getAlbum = async(bandKey: string, albumKey: string) =>{\r\n    var albums = await getBandAlbums(bandKey);\r\n    var album = albums.find(x=>x.id == albumKey);\r\n\r\n    return Promise.resolve(album);\r\n}\r\n\r\nconst getMultipleFromLinkList = async<T>(links:Models.DataLink[]) =>{\r\n    var promises: Promise<void>[] = [];\r\n    var data: T[] = [];\r\n\r\n    links.forEach(x => {\r\n        promises.push(axios.get<T>(resolveUrl(x.linkToData)).then((result) => {\r\n            data.push(result.data);\r\n        }));\r\n    });\r\n\r\n    await Promise.all(promises);\r\n    return Promise.resolve(data);\r\n}\r\n\r\n\r\nexport { getAllBands, getBand, getMultipleFromLinkList, getBandAlbums, getAlbum};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\nexport interface BandStore {\r\n    allBands: Models.Band[],\r\n    displayBands: Models.Band[]\r\n}\r\n\r\nexport const initialState: BandStore = {\r\n    allBands: [],\r\n    displayBands: []\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"band-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAllBands: (state: BandStore, action: PayloadAction<Models.Band[]>) => {\r\n            state.allBands = action.payload;\r\n        },\r\n        setDisplayBands: (state: BandStore, action: PayloadAction<Models.Band[]>) => {\r\n            state.displayBands = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setAllBands, setDisplayBands } = slice.actions;\r\n\r\n// thunks\r\n\r\nexport const getAllBands = (): AppThunk => async (dispatch, store) => {\r\n    var result = await BandService.getAllBands();\r\n    dispatch(setDisplayBands(result));\r\n    console.log(result);\r\n}","import React from 'react';\r\nimport { TableContainer, Table, TableHead, TableCell, TableRow, TableBody } from '@material-ui/core';\r\n\r\nexport interface TableProps<T> {\r\n    data: T[];\r\n    headers: TableHeader[];\r\n    rowRenderer: (row: T) => JSX.Element;\r\n}\r\n\r\nexport interface TableHeader {\r\n    title: string;\r\n}\r\n\r\nconst TableGrid = function <T>(props: TableProps<T>) {\r\n    return (<TableContainer>\r\n        <Table size=\"medium\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    {\r\n                        props.headers.map(x => <TableCell key={x.title}>{x.title}</TableCell>)\r\n                    }\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    \r\n                    props.data.map((x,i) => <TableRow key={i}>{props.rowRenderer(x)}</TableRow>)\r\n                    \r\n                }\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>);\r\n}\r\n\r\nexport { TableGrid };","export const ROUTES = {\r\n    BAND_LIST: \"/\",\r\n    BAND_PAGE: \"/band/:bandName\",\r\n    ALBUM_PAGE: \"/band/:bandName/album/:albumName\"\r\n}","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getAllBands } from '../stores/band-list-store';\r\nimport { connect } from 'react-redux';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { TableGrid, TableHeader } from '../components/grid';\r\nimport { TableRow, TableCell, Link } from '@material-ui/core';\r\nimport { generatePath} from 'react-router';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport { ROUTES } from '../lib/consts';\r\n\r\ninterface MainPageProps {\r\n    getAllBands: () => void;\r\n    gridData: Models.Band[];\r\n}\r\n\r\nconst MainPage = (props: MainPageProps) => {\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"genre\"\r\n        },\r\n        {\r\n            title: \"location\"\r\n        },\r\n        {\r\n            title: \"Status\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Band) => JSX.Element = (row: Models.Band) => {\r\n        const url = generatePath(ROUTES.BAND_PAGE, {\r\n            bandName: row.id\r\n        });\r\n        console.log(url);\r\n        \r\n        return (<>\r\n            <TableCell><Link component={RouterLink} to={url}>{row.name}</Link></TableCell>\r\n            <TableCell>{row.genre}</TableCell>\r\n            <TableCell>{row.location}</TableCell>\r\n            <TableCell>{row.status}</TableCell>\r\n        </>);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        props.getAllBands();\r\n    }, []);\r\n    return <TableGrid<Models.Band> headers={titles} rowRenderer={rowRenderer} data={props.gridData}  />;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    getAllBands: () => {\r\n        dispatch(getAllBands());\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        gridData: state.bandList.displayBands\r\n    };\r\n}\r\n\r\nconst MainPageContainer = connect(mapStateToProps, mapDispatchToProps)(MainPage);\r\n\r\nexport default MainPageContainer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface AlbumPageStore {\r\n    album?: Models.Album;\r\n}\r\n\r\nexport const initialState: AlbumPageStore = {\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"album-page-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAlbum: (state: AlbumPageStore, action: PayloadAction<Models.Album | undefined>) => {\r\n            state.album = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setAlbum } = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const getAlbum = (bandKey: string, albumKey: string): AppThunk => async (dispatch, store) => {\r\n    var albumResult = await BandService.getAlbum(bandKey,albumKey);\r\n    console.log(albumResult);\r\n    dispatch(setAlbum(albumResult));\r\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface PlayerStore {\r\n    playlist: Models.PlayerEntry[];\r\n    currentPlayingIndex: number;\r\n    isPlaying: boolean;\r\n}\r\n\r\nexport const initialState: PlayerStore = {\r\n    playlist: [],\r\n    isPlaying: false,\r\n    currentPlayingIndex: 0\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"player-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setPlaylist: (state: PlayerStore, action: PayloadAction<Models.PlayerEntry[]>) => {\r\n            state.playlist = action.payload;\r\n        },\r\n        setIsPlaying: (state: PlayerStore, action: PayloadAction<boolean>)=>{\r\n            state.isPlaying = action.payload;\r\n        },\r\n        setCurrentPlayingIndex: (state: PlayerStore, action: PayloadAction<number>)=>{\r\n            state.currentPlayingIndex = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setPlaylist, setIsPlaying, setCurrentPlayingIndex} = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const addToPlaylist = (entry: Models.PlayerEntry): AppThunk => async (dispatch, store) => {\r\n    let allEntries = [...store().player.playlist];\r\n    allEntries.push(entry);\r\n    dispatch(setPlaylist(allEntries));\r\n}\r\n\r\nexport const onInAlbumPlay= (songs: Models.Song[], toPlay: Models.Song): AppThunk => async(dispatch, store) =>{\r\n    var songIndex = songs.indexOf(toPlay);\r\n    var playlist = songs.slice(songIndex);\r\n    dispatch(setPlaylist(playlist.map(x=> {return {name: x.name, url: x.playUrl}})));\r\n    dispatch(setCurrentPlayingIndex(0));\r\n};\r\n\r\nexport const onPlayNext = (): AppThunk => async(dispatch, store) => {\r\n    var newIndex = store().player.currentPlayingIndex +1;\r\n    if(store().player.playlist.length > newIndex){\r\n        console.log(newIndex);\r\n        dispatch(setCurrentPlayingIndex(newIndex));\r\n    }\r\n}\r\n\r\nexport const onPlayPrevious = (): AppThunk => async(dispatch, store) => {\r\n    var newIndex = store().player.currentPlayingIndex - 1;\r\n    if(newIndex >= 0){\r\n        dispatch(setCurrentPlayingIndex(newIndex));\r\n    }\r\n}","import React from 'react';\r\nimport { Box, LinearProgress, Typography, Grid, Button } from '@material-ui/core';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connect } from 'react-redux';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport * as PlayerStore from '../stores/player-store';\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport 'react-h5-audio-player/lib/styles.css';\r\n\r\nexport interface PlayerProps {\r\n    currentPlay?: Models.PlayerEntry;\r\n    playlist: Models.PlayerEntry[];\r\n    // autoplay: boolean;\r\n    isPlaying: boolean;\r\n    // setAutoplay: (val: boolean) => void;\r\n    setIsPlaying: (val: boolean) => void;\r\n    onNext: () => void;\r\n    onPrevious: () => void;\r\n}\r\n\r\nconst _Player = (props: PlayerProps) => {\r\n    return (\r\n        <>\r\n            {props.playlist.length != 0 ?\r\n                <Box>\r\n                    <Typography>{props.currentPlay ? props.currentPlay.name : \"\"}</Typography>\r\n                    <AudioPlayer\r\n                        autoPlay\r\n                        src={props.currentPlay ? props.currentPlay.url : \"\"}\r\n                        showSkipControls={props.playlist.length > 1}\r\n                        onClickNext={props.onNext}\r\n                        onClickPrevious={props.onPrevious}\r\n                        onEnded={props.onNext}\r\n                        onPlay={e => console.log(\"onPlay\")}\r\n                    />\r\n                </Box> : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    setIsPlaying: (val: boolean) => {\r\n        dispatch(PlayerStore.setIsPlaying(val))\r\n    },\r\n    onNext: () => {\r\n        dispatch(PlayerStore.onPlayNext());\r\n    },\r\n    onPrevious: () => {\r\n        dispatch(PlayerStore.onPlayPrevious());\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    const getCurrentPlay = () =>{\r\n        if(state.player.playlist.length == 0){\r\n            return undefined;\r\n        }\r\n        if(state.player.playlist.length == 1){\r\n            return state.player.playlist[0];\r\n        }\r\n        return state.player.playlist[state.player.currentPlayingIndex];\r\n    }\r\n\r\n    var curPlay = getCurrentPlay();\r\n    console.log(\"CurentPlay: \", curPlay);\r\n\r\n    return {\r\n        currentPlay: getCurrentPlay(),\r\n        playlist: state.player.playlist,\r\n        isPlaying: state.player.isPlaying\r\n    };\r\n}\r\n\r\nconst Player = connect(mapStateToProps, mapDispatchToProps)(_Player);\r\n\r\nexport default Player;","import React from 'react';\r\nimport { TableHeader, TableGrid } from '../components/grid';\r\nimport { TableCell, Box, Typography, Button } from '@material-ui/core';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getAlbum } from '../stores/album-page-store';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connect } from 'react-redux';\r\nimport Player from '../components/player';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport { onInAlbumPlay } from '../stores/player-store';\r\nimport moment from 'moment';\r\n\r\nexport interface AlbumPageProps {\r\n    match: {\r\n        params: {\r\n            bandName: string;\r\n            albumName: string;\r\n        }\r\n    }\r\n\r\n    album?: Models.Album;\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) => void;\r\n    init: (bandKey: string, albumKey: string) => void;\r\n}\r\n\r\nconst AlbumPage = (props: AlbumPageProps) => {\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName, props.match.params.albumName);\r\n    }, []);\r\n\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"length\"\r\n        },\r\n        {\r\n            title: \"\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Song) => JSX.Element = (row: Models.Song) => {\r\n\r\n        return (<>\r\n            <TableCell>{row.name}</TableCell>\r\n            <TableCell>{moment.utc(row.lenght * 1000).format('mm:ss')}</TableCell>\r\n            <TableCell><Button onClick={() => { props.onSongPlay(props.album!.songs, row) }} ><PlayCircleOutlineIcon /></Button></TableCell>\r\n        </>);\r\n    }\r\n\r\n    if (props.album) {\r\n        console.log(\"props\", props.album);\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                props.album ?\r\n                    <Box>\r\n                        <Typography>{props.album!.name}</Typography>\r\n                        <Player />\r\n                        <TableGrid<Models.Song> headers={titles} rowRenderer={rowRenderer} data={props.album.songs} />\r\n                    </Box>\r\n                    : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    init: (bandKey: string, albumKey: string) => {\r\n        dispatch(getAlbum(bandKey, albumKey));\r\n    },\r\n    onSongPlay: (songs: Models.Song[], songToPlay: Models.Song) =>{\r\n        dispatch(onInAlbumPlay(songs, songToPlay));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        album: state.albumPage.album\r\n    };\r\n}\r\n\r\nconst AlbumPageContainer = connect(mapStateToProps, mapDispatchToProps)(AlbumPage);\r\n\r\nexport default AlbumPageContainer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk } from \"./app-thunk\";\r\nimport * as BandService from '../services/band-service';\r\n\r\n\r\nexport interface BandPageStore {\r\n    band?: Models.Band;\r\n    albums: Models.Album[];\r\n}\r\n\r\nexport const initialState: BandPageStore = {\r\n    albums: []\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: \"band-page-store\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setBand: (state: BandPageStore, action: PayloadAction<Models.Band | undefined>) => {\r\n            state.band = action.payload;\r\n        },\r\n        setAlbums: (state: BandPageStore, action: PayloadAction<Models.Album[]>)=>{\r\n            state.albums = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setBand, setAlbums } = slice.actions;\r\n\r\n// Thunk action;\r\n\r\nexport const getBand = (id: string): AppThunk => async (dispatch, store) => {\r\n    var bandResult = await BandService.getBand(id);\r\n    var albumsResult = await BandService.getMultipleFromLinkList<Models.Album>(bandResult.albums);\r\n    dispatch(setBand(bandResult));\r\n    dispatch(setAlbums(albumsResult));\r\n}","import React from 'react';\r\nimport { AppDispatch } from '../stores/app-thunk';\r\nimport { getBand } from '../stores/band-page-store';\r\nimport ApplicationState from '../stores/application-state';\r\nimport { connectAdvanced, connect } from 'react-redux';\r\nimport { Typography, Box, TableCell, Link, TableRow } from '@material-ui/core';\r\nimport { TableHeader, TableGrid } from '../components/grid';\r\nimport { generatePath } from 'react-router';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport { ROUTES } from '../lib/consts';\r\nimport moment from 'moment';\r\n\r\nexport interface BandPageProps {\r\n    match: {\r\n        params: {\r\n            bandName: string;\r\n        }\r\n    }\r\n\r\n    band?: Models.Band;\r\n    albums: Models.Album[];\r\n    init: (id: string) => void;\r\n}\r\n\r\nconst BandPage = (props: BandPageProps) => {\r\n    React.useEffect(() => {\r\n        props.init(props.match.params.bandName);\r\n    }, []);\r\n\r\n    const titles: TableHeader[] = [\r\n        {\r\n            title: \"name\"\r\n        },\r\n        {\r\n            title: \"year\"\r\n        },\r\n        {\r\n            title: \"length\"\r\n        }\r\n    ];\r\n\r\n    const rowRenderer: (row: Models.Album) => JSX.Element = (row: Models.Album) => {\r\n        const url = generatePath(ROUTES.ALBUM_PAGE, {\r\n            bandName: props.match.params.bandName,\r\n            albumName: row.id\r\n        });\r\n        console.log(url);\r\n        \r\n        return (<>\r\n            <TableCell><Link component={RouterLink} to={url}>{row.name}</Link></TableCell>\r\n            <TableCell>{row.year}</TableCell>\r\n            <TableCell>{moment.utc(row.length * 1000).format('mm:ss')}</TableCell>\r\n        </>);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.band ?\r\n                    <Box>\r\n                        <Typography>{props.band!.name}</Typography>\r\n                        <TableGrid<Models.Album> headers={titles} rowRenderer={rowRenderer} data={props.albums}  />\r\n                    </Box>\r\n                    : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\r\n    init: (id: string) => {\r\n        dispatch(getBand(id));\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n    return {\r\n        band: state.bandPage.band,\r\n        albums: state.bandPage.albums\r\n    };\r\n}\r\n\r\nconst BandPageContainer = connect(mapStateToProps, mapDispatchToProps)(BandPage);\r\n\r\nexport default BandPageContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Box, Typography } from '@material-ui/core';\nimport MainPageContainer from './pages/main-page';\nimport { ROUTES } from './lib/consts';\nimport { Route } from 'react-router';\nimport AlbumPage from './pages/album-page';\nimport BandPageContainer from './pages/band-page';\nimport { HashRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Box>\n        <Typography align=\"center\" variant=\"h2\">MK Metal Archive</Typography>\n        <Route exact path={ROUTES.BAND_LIST} component={MainPageContainer} />\n        <Route exact path={ROUTES.BAND_PAGE} component={BandPageContainer} />\n        <Route exact path={ROUTES.ALBUM_PAGE} component={AlbumPage} />\n      </Box>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as BandListStore from './band-list-store';\r\nimport * as BandPageStore from './band-page-store';\r\nimport * as AlbumPageStore from './album-page-store';\r\nimport * as PlayerStore from './player-store';\r\n\r\n\r\nconst reducers = {\r\n    bandList: BandListStore.slice.reducer,\r\n    bandPage: BandPageStore.slice.reducer,\r\n    albumPage: AlbumPageStore.slice.reducer,\r\n    player: PlayerStore.slice.reducer\r\n};\r\n\r\nexport {reducers};","import { History } from 'history';\r\nimport ApplicationState from './application-state';\r\nimport { getDefaultMiddleware, configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\r\nimport { reducers } from './root-reducer';\r\n\r\nfunction configureAppStore(history: History) {\r\n    const middleware = [...getDefaultMiddleware(), routerMiddleware(history)];\r\n\r\n    const store = configureStore({\r\n        reducer: getRootReducer(history),\r\n        middleware: middleware\r\n    });\r\n\r\n    return store;\r\n}\r\n\r\nfunction getRootReducer(history: History) {\r\n    return combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n}\r\n\r\nexport default configureAppStore;","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    // create theme here\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createBrowserHistory } from 'history';\nimport configureAppStore from './stores/configure-store';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nconst history = createBrowserHistory({ basename: window.location.host });\nconst store = configureAppStore(history);\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}